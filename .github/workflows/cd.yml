# .github/workflows/cd.yml

# Continuous Delivery Workflow
#
# This runs whenever we push a new tag (e.g., v1.0.0)
# and pushes a Docker image to our private AWS ECR repo,
# then deploys it to ECS.

name: cd

on:
  push:
    # Run this workflow when a tag like v0.7.0 is pushed
    tags:
      - 'v**'

jobs:
  aws:
    name: AWS
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Check out code
        uses: actions/checkout@v4

      # Set up Docker Buildx for efficient builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Configure AWS Credentials from GitHub Encrypted Secrets
      - name: Configure AWS Credentials using Secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build and Push an Image to Amazon ECR
      - name: Build and push to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO: fragments
          VERSION_TAG: ${{ github.ref_name }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${{ env.VERSION_TAG }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:latest

      # We need to update our fragment's Task Definition JSON
      # (i.e., fragments-definition.json) to use the newly
      # updated Docker Image to use (i.e., the tag we just pushed to ECR).
      # We can also update/set the environment variables if we want.
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: update-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO: fragments
          VERSION_TAG: ${{ github.ref_name }}
        with:
          task-definition: fragments-definition.json
          container-name: fragments-fk
          # Use the image we just built and pushed to ECR for this tag
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${{ env.VERSION_TAG }}
          # Add all the necessary environment variables
          # NOTE: AWS credentials removed - using IAM roles instead!
          environment-variables: |
            LOG_LEVEL=info
            NODE_ENV=production
            PORT=3000
            API_URL=http://fragments-lb-2060865639.us-east-1.elb.amazonaws.com:3000
            AWS_S3_BUCKET_NAME=seneca-fkhurrum-fragments
            AWS_REGION=us-east-1
            AWS_COGNITO_POOL_ID=us-east-1_UsHIsMBLl
            AWS_COGNITO_CLIENT_ID=68n47ooqg5i3dlvc82ks0nea20

      # Deploy the updated task definition to ECS
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.update-task-def.outputs.task-definition }}
          cluster: fragments-cluster
          service: fragments-service
