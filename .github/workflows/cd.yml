# .github/workflows/cd.yml
# Continuous Delivery: tag -> build & push to ECR -> update ECS service (OIDC-based)

name: cd

on:
  push:
    tags:
      - 'v**'   # run on version tags like v0.7.0

permissions:
  id-token: write   # required for OIDC
  contents: read

jobs:
  aws:
    name: AWS
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout
      - name: Check out code
        uses: actions/checkout@v4

      # 2) Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3) Configure AWS creds via GitHub OIDC (no static keys)
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::470742339740:role/LabRole
          aws-region: us-east-1

      # 4) Login to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 5) Build & Push image to ECR (tag + latest)
      - name: Build and push to Amazon ECR
        uses: docker/build-push-action@v6
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO: fragments
          VERSION_TAG: ${{ github.ref_name }}
        with:
          context: .
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${{ env.VERSION_TAG }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:latest

      # 6) Render task definition with new image + env vars
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: update-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO: fragments
          VERSION_TAG: ${{ github.ref_name }}
        with:
          task-definition: fragments-definition.json
          # MUST MATCH the container name in fragments-definition.json
          container-name: fragments-fk
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${{ env.VERSION_TAG }}
          environment-variables: |
            LOG_LEVEL=info
            NODE_ENV=production
            PORT=3000
            API_URL=http://fragments-lb-2060865639.us-east-1.elb.amazonaws.com:3000
            AWS_S3_BUCKET_NAME=seneca-fkhurrum-fragments
            AWS_REGION=us-east-1
            AWS_COGNITO_POOL_ID=us-east-1_UsHIsMBLl
            AWS_COGNITO_CLIENT_ID=68n47ooqg5i3dlvc82ks0nea20

      # 7) Deploy to ECS and wait for stability
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.update-task-def.outputs.task-definition }}
          cluster: fragments-cluster
          service: fragments-service
          wait-for-service-stability: true
